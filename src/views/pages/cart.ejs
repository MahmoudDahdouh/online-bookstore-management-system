<!DOCTYPE html>
<html lang="en">
  <%- include('../partials/head'); %>

  <script>
    const localCart = JSON.parse(localStorage.getItem('cart')) || []

    const cart = localCart.reduce((acc, book) => {
      const found = acc.find((item) => item.id === book.id)
      if (found) {
        found.quantity++
      } else {
        acc.push({ ...book, quantity: 1 })
      }
      return acc
    }, [])
  </script>
  <body>
    <!--Nvabar-->
    <%- include('../partials/navbar')%>

    <!-- Main -->
    <main>
      <div class="container mt-5">
        <div class="d-flex align-items-center gap-4">
          <a href="/books" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-2"></i>
            back
          </a>
          <h2 class="mb-0">Cart</h2>
        </div>
        <div class="table-responsive-md">
          <table class="table table-striped table-hover mt-2">
            <thead class="table-primary">
              <tr>
                <th scope="col">ID</th>
                <th scope="col">Name</th>
                <th scope="col">Description</th>
                <th scope="col">Price</th>
                <th scope="col">Quantity</th>
                <th scope="col"></th>
              </tr>
            </thead>

            <script>
              cart.map((book) => {
                document.write(`<tr>
                <th scope="row">${book.id}</th>
                <td>${book.title}</td>
                <td>${book.description}</td>
                <td>$${book.price}</td>
                <td>
                    <button
                        class="btn btn-outline-primary btn-sm"
                        onclick="updateQuantity('${book.id}', 'decrease',${book.quantity})"
                    >
                        <i class="fas fa-minus"></i>
                    </button>   
                    <span class="mx-2">${book.quantity}</span>
                    <button
                        class="btn btn-outline-primary btn-sm"
                        onclick="updateQuantity('${book.id}', 'increase', ${book.quantity})"
                    >
                        <i class="fas fa-plus"></i>
                    </button>
                    
                    
                    </td>
                <td>
                  <button
                    class="btn-delete btn btn-danger btn-sm"
                    onclick="deleteBook('${book.id}')"
                  >
                    <i class="fas fa-trash me-2"></i>
                    delete
                  </button>
                </td>
              </tr>`)
              })
            </script>
          </table>
        </div>

        <div>
          <script>
            const total = localCart.reduce((acc, item) => acc + item.price, 0)
            document.write(
              `<h3 class='text-end mt-4 fs-1'>Total: $ ${total}</h3>`
            )
          </script>
        </div>
        <div class="d-flex justify-content-end">
          <button onclick="checkout()" class="btn btn-primary btn-lg">
            <i class="fas fa-shopping-cart me-2"></i>
            Checkout
          </button>
        </div>
      </div>
    </main>
    <!-- footer -->
    <%- include('../partials/footer'); %>
    <!-- Bootstrap JS files -->
    <script src="js/bootstrap.js"></script>
    <script src="js/main.js"></script>

    <script>
      // delete book from cart
      const deleteBook = (id) => {
        const newCart = localCart.filter((book) => book.id != id)
        localStorage.setItem('cart', JSON.stringify(newCart))
        location.reload()
      }

      // update book quantity
      const updateQuantity = (id, action, current) => {
        console.log({ id, action, current })
        if (current <= 1 && action == 'decrease') {
          return
        }
        let newCart = [...localCart]

        for (let i = 0; i < localCart.length; i++) {
          const element = localCart[i]
          if (element.id == id) {
            if (action === 'increase') {
              console.log('increased', element)
              newCart.push(element)
              break
            } else {
              console.log('decreased')
              // remove one element with id
              const deleteIndex = newCart.findIndex((book) => book.id == id)
              if (deleteIndex > -1) {
                newCart.splice(deleteIndex, 1)
              }
              break
            }
          }
        }
        localStorage.setItem('cart', JSON.stringify(newCart))
        location.reload()
      }

      // checkout
      const checkout = async () => {
        console.log('checkout')
        const orders = cart.map((book) => {
          return {
            book_id: book.id,
            quantity: book.quantity,
            price: book.price * book.quantity,
          }
        })

        console.log({ orders })

        const response = await fetch('/api/v1.0/order/checkout', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: 'Bearer ' + '<%= user.token %>',
          },
          body: JSON.stringify({ orders }),
        })
        if (response.ok) {
          console.log(response)
          localStorage.removeItem('cart')
          location.href = '/cart/checkout'
        }
      }
    </script>
  </body>
</html>
